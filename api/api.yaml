openapi: 3.0.1
info:
  title: Issue Tracker
  description: ASW Issue Tracker
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://issue-tracker-asw-ruby.herokuapp.com/'
  - url: 'http://petstore.swagger.io/v2'
tags:
  - name: issue
    description: Everything about your Issues
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /issues.jso:
    get:
      tags:
        - issue
      summary: Get all issues
      description: Returns all issues
      operationId: getIssues
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Issue'
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
    put:
      tags:
        - issue
      summary: Update an existing issue
      operationId: updateIssue
      requestBody:
        description: Issue part to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
          application/xml:
            schema:
              $ref: '#/components/schemas/Issue'
        required: true
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Issue not found
          content: {}
        '405':
          description: Validation exception
          content: {}
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    post:
      tags:
        - issue
      summary: Add a new issue
      operationId: addIssue
      requestBody:
        description: Issue object to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
          application/xml:
            schema:
              $ref: '#/components/schemas/Issue'
        required: true
      responses:
        '405':
          description: Invalid input
          content: {}
  /issues.json:
    get:
      tags:
        - issue
      summary: Finds Issues by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findIssueByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - new
                - open
                - on hold
                - invalid
                - duplicate
                - resolved
                - wontfix
                - closed
        - name: kind
          in: query
          description: Kind values that need to be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - bug
                - enhancement
                - proposal
                - task
        - name: priority
          in: query
          description: Priority values that need to be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - trivial
                - minor
                - major
                - critical
                - blocker
              
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
        '400':
          description: Invalid status value
          content: {}
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/issues/{id}.json':
    get:
      tags:
        - issue
      summary: Find issue by ID
      description: Returns a single issue
      operationId: getIssueById
      parameters:
        - name: id
          in: path
          description: ID of issue to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Issue'
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Issue not found
          content: {}
      security:
        - api_key: []
  '/issues/{id}/comments.json':
    get:
      tags:
        - comments
      summary: Returns comments from the issue specified by ID
      description: Returns a map of status codes to quantities
      operationId: getInventory
      parameters:
        - name: id
          in: path
          description: ID of the issue to return its comments
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /users.json:
    get:
      tags:
        - user
      summary: get users
      description: This can only be done by the logged in user.
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Issue'
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
components:
  schemas:
    Issue:
      type: object
      properties:
        id:
          type: integer
        kind:
          type: string
        priority:
          type: string
        status:
          type: string
        assignee:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date
          nullable: false
        updated_at:
          type: string
          format: date
          nullable: false
        user_id:
          type: integer
        asignee_id:
          type: integer
      xml:
        name: Issue
    Comment:
      type: object
      properties:
        content:
          type: string
        issue_id:
          type: integer
        user_id:
          type: integer
        created_at:
          type: string
          format: ''
          nullable: false
        updated_at:
          type: string
          format: ''
          nullable: false
      xml:
        name: Comment
    User:
      type: object
      properties:
        provider:
          type: string
        uid:
          type: string
        name:
          type: string
        imageurl:
          type: string
        created_at:
          type: string
          format: date
          nullable: false
        updated_at:
          type: string
          format: date
          nullable: false
        oauth_token:
          type: string
        oauth_expires_at:
          type: string
      xml:
        name: User
    Vote:
      type: object
      properties:
        issue_id:
          type: integer
        user_id:
          type: integer
        created_at:
          type: string
          format: ''
          nullable: false
        updated_at:
          type: string
          format: ''
          nullable: false
      xml:
        name: Vote
    Watch:
      type: object
      properties:
        issue_id:
          type: integer
        user_id:
          type: integer
        created_at:
          type: string
          format: ''
          nullable: false
        updated_at:
          type: string
          format: ''
          nullable: false
      xml:
        name: Watch
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
