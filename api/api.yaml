openapi: 3.0.1
info:
  title: Issue Tracker
  description: ASW Issue Tracker
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: GitHub repository
  url: 'https://github.com/agusdac/asw-issue-tracker'
servers:
  - url: 'https://issue-tracker-asw-ruby.herokuapp.com/'
tags:
  - name: issue
    description: Everything about your Issues
  - name: user
    description: Operations about user
paths:
  /issues.json:
    get:
      tags:
        - issue
      summary: Get all issues
      description: Returns all issues
      operationId: getIssues
      parameters:
        - name: status
          in: query
          description: Filters issues by status
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
              enum:
                - new
                - open
                - on hold
                - invalid
                - duplicate
                - resolved
                - wontfix
                - closed
        - name: kind
          in: query
          description: Filters issues by kind
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
              enum:
                - bug
                - enhancement
                - proposal
                - task
        - name: priority
          in: query
          description: Filters issues by priority
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
              enum:
                - trivial
                - minor
                - major
                - critical
                - blocker
        - name: assignee_id
          in: query
          description: Filters issues by assignee id
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Filters issues by assignee id
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - id
                - kind
                - priority
                - assignee
                - created_at
                - updated_at
        - name: dir
          in: query
          description: Direction of sorting (only select if sorting is selected)
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - down        
                
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/IssueIndex'
            application/json:
              schema:
                $ref: '#/components/schemas/IssueIndex'
    post:
      tags:
        - issue
      summary: Add a new issue
      operationId: addIssue
      requestBody:
        description: Issue object to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCreate'
          application/xml:
            schema:
              $ref: '#/components/schemas/IssueCreate'
        required: true
      responses:
        '405':
          description: Invalid input
          content: {}
  /issues/{id}.json:
    get:
      tags:
        - issue
      summary: Find issue by ID
      description: Returns a single issue
      operationId: getIssueById
      parameters:
        - name: id
          in: path
          description: ID of issue to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Issue'
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Issue not found
          content: {}
      security:
        - api_key: []
    put:
      tags:
        - issue
      summary: Edit an issue 
      description: Edit an issue with a certain id
      operationId: editIssueById
      parameters:
        - name: id
          in: path
          description: ID of issue to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Issue parameters to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueEdit'
          application/xml:
            schema:
              $ref: '#/components/schemas/IssueEdit'
        required: true 
        
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Issue'
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Issue not found
          content: {}
      security:
        - api_key: []
  '/issues/{id}/votes.json':
    get:
      tags:
        - votes
      summary: return number of votes from the issue specified by ID
      description: asdf
      operationId: asdf2
      parameters:
        - name: id
          in: path
          description: ID of the issue to return its votes
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  '/issues/{id}/comments.json':
    get:
      tags:
        - comments
      summary: Returns comments from the issue specified by ID
      description: Returns a map of status codes to quantities
      operationId: getInventory
      parameters:
        - name: id
          in: path
          description: ID of the issue to return its comments
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /users.json:
    get:
      tags:
        - user
      summary: get users
      description: This can only be done by the logged in user.
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Issue'
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
components:
  schemas:
    IssueEdit:
      type: object
      required:
      - id
      properties:
        title:
          type: string
          example: "New issue title"
        description:
          type: string
          example: "New issue description"
        assignee_id:
          type: integer
          example: 1
        kind:
          type: string
          enum:
          - bug
          - enhancement
          - proposal
          - task
        priority:
          type: string
          enum:
          - trivial
          - minor
          - major
          - critical
          - blocker
        status: 
          type: string
          enum:
          - new
          - open
          - on hold
          - invalid
          - duplicate
          - resolved
          - wontfix
          - closed
    IssueCreate:
      type: object
     
      properties:
        
        title:
          type: string
          example: "Issue title..."
        description:
          type: string
          example: "Issue description..."
        assignee_id:
          type: integer
          example: 1
        kind:
          type: string
          enum:
          - bug
          - enhancement
          - proposal
          - task
        priority:
          type: string
          enum:
          - trivial
          - minor
          - major
          - critical
          - blocker
    IssueIndex:
      type: object
      properties:
        id:
          type: integer
        kind:
          type: string
        priority:
          type: string
        status:
          type: string
        votes:
          type: integer
        assignee:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date
          nullable: false
        updated_at:
          type: string
          format: date
          nullable: false
        user_id:
          type: integer
        asignee_id:
          type: integer
    Issue:
      type: object
      properties:
        id:
          type: integer
        kind:
          type: string
        priority:
          type: string
        status:
          type: string
        assignee:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date
          nullable: false
        updated_at:
          type: string
          format: date
          nullable: false
        user_id:
          type: integer
        asignee_id:
          type: integer
      xml:
        name: Issue
    Comment:
      type: object
      properties:
        content:
          type: string
        issue_id:
          type: integer
        user_id:
          type: integer
        created_at:
          type: string
          format: ''
          nullable: false
        updated_at:
          type: string
          format: ''
          nullable: false
      xml:
        name: Comment
    User:
      type: object
      properties:
        provider:
          type: string
        uid:
          type: string
        name:
          type: string
        imageurl:
          type: string
        created_at:
          type: string
          format: date
          nullable: false
        updated_at:
          type: string
          format: date
          nullable: false
        oauth_token:
          type: string
        oauth_expires_at:
          type: string
      xml:
        name: User
    Vote:
      type: object
      properties:
        issue_id:
          type: integer
        user_id:
          type: integer
        created_at:
          type: string
          format: ''
          nullable: false
        updated_at:
          type: string
          format: ''
          nullable: false
      xml:
        name: Vote
    Watch:
      type: object
      properties:
        issue_id:
          type: integer
        user_id:
          type: integer
        created_at:
          type: string
          format: ''
          nullable: false
        updated_at:
          type: string
          format: ''
          nullable: false
      xml:
        name: Watch
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
